name: benchmarks

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main
      - gha**
      - feature/**

jobs:
  posix:
    strategy:
      fail-fast: false
      matrix:
        include:
          # - compiler: g++-11
          #   architecture: -m64
          #   sourcefile: string.cpp
          #   compileroptions: -std=c++2a -O3 -DNDEBUG -DHAVE_ABSEIL
          #   outputfile: benchmark
          #   os: [self-hosted, linux, x64]
          #   install: g++-11
          #   globalinstall: g++-11 libc++-12-dev libc++abi-12-dev gcc-11-multilib g++-11-multilib gcc-multilib g++-multilib
          #   command: sudo cset shield --exec -- nice -n -20 sudo -u gha ./benchmark
          # - compiler: g++-11
          #   architecture: -m64
          #   sourcefile: string_view.cpp
          #   compileroptions: -std=c++2a -O3 -DNDEBUG -DHAVE_ABSEIL
          #   outputfile: benchmark
          #   os: [self-hosted, linux, x64]
          #   install: g++-11
          #   command: sudo cset shield --exec -- nice -n -20 sudo -u gha ./benchmark
          # - compiler: g++-11
          #   architecture: -m64
          #   sourcefile: uint32.cpp
          #   compileroptions: -std=c++2a -O3 -DNDEBUG -DHAVE_ABSEIL
          #   outputfile: benchmark
          #   os: [self-hosted, linux, x64]
          #   install: g++-11
          #   command: sudo cset shield --exec -- nice -n -20 sudo -u gha ./benchmark
          # - compiler: g++-11
          #   architecture: -m64
          #   sourcefile: uint64.cpp
          #   compileroptions: -std=c++2a -O3 -DNDEBUG -DHAVE_ABSEIL
          #   outputfile: benchmark
          #   os: [self-hosted, linux, x64]
          #   install: g++-11
          #   command: sudo cset shield --exec -- nice -n -20 sudo -u gha ./benchmark
          # - compiler: clang++-12
          #   architecture: -m64
          #   sourcefile: string.cpp
          #   compileroptions: -std=c++2a -O3 -DNDEBUG -DHAVE_ABSEIL
          #   outputfile: benchmark
          #   os: [self-hosted, linux, x64]
          #   command: sudo cset shield --exec -- nice -n -20 sudo -u gha ./benchmark
          # - compiler: clang++-12
          #   architecture: -m64
          #   sourcefile: string_view.cpp
          #   compileroptions: -std=c++2a -O3 -DNDEBUG -DHAVE_ABSEIL
          #   outputfile: benchmark
          #   os: [self-hosted, linux, x64]
          #   command: sudo cset shield --exec -- nice -n -20 sudo -u gha ./benchmark
          # - compiler: clang++-12
          #   architecture: -m64
          #   sourcefile: uint32.cpp
          #   compileroptions: -std=c++2a -O3 -DNDEBUG -DHAVE_ABSEIL
          #   outputfile: benchmark
          #   os: [self-hosted, linux, x64]
          #   command: sudo cset shield --exec -- nice -n -20 sudo -u gha ./benchmark
          # - compiler: clang++-12
          #   architecture: -m64
          #   sourcefile: uint64.cpp
          #   compileroptions: -std=c++2a -O3 -DNDEBUG -DHAVE_ABSEIL
          #   outputfile: benchmark
          #   os: [self-hosted, linux, x64]
          #   command: sudo cset shield --exec -- nice -n -20 sudo -u gha ./benchmark
          # - compiler: clang++-12
          #   architecture: -m64
          #   sourcefile: string.cpp
          #   compileroptions: -std=c++2a -O3 -stdlib=libc++ -DNDEBUG -DHAVE_ABSEIL
          #   outputfile: benchmark
          #   os: [self-hosted, linux, x64]
          #   install: libc++-12-dev libc++abi-12-dev
          #   command: sudo cset shield --exec -- nice -n -20 sudo -u gha ./benchmark
          # - compiler: clang++-12
          #   architecture: -m64
          #   sourcefile: string_view.cpp
          #   compileroptions: -std=c++2a -O3 -stdlib=libc++ -DNDEBUG -DHAVE_ABSEIL
          #   outputfile: benchmark
          #   os: [self-hosted, linux, x64]
          #   install: libc++-12-dev libc++abi-12-dev
          #   command: sudo cset shield --exec -- nice -n -20 sudo -u gha ./benchmark
          # - compiler: clang++-12
          #   architecture: -m64
          #   sourcefile: uint32.cpp
          #   compileroptions: -std=c++2a -O3 -stdlib=libc++ -DNDEBUG -DHAVE_ABSEIL
          #   outputfile: benchmark
          #   os: [self-hosted, linux, x64]
          #   install: libc++-12-dev libc++abi-12-dev
          #   command: sudo cset shield --exec -- nice -n -20 sudo -u gha ./benchmark
          # - compiler: clang++-12
          #   architecture: -m64
          #   sourcefile: uint64.cpp
          #   compileroptions: -std=c++2a -O3 -stdlib=libc++ -DNDEBUG -DHAVE_ABSEIL
          #   outputfile: benchmark
          #   os: [self-hosted, linux, x64]
          #   install: libc++-12-dev libc++abi-12-dev
          #   command: sudo cset shield --exec -- nice -n -20 sudo -u gha ./benchmark
          # - compiler: g++-11
          #   architecture: -m32
          #   sourcefile: string.cpp
          #   compileroptions: -std=c++2a -O3 -DNDEBUG -DHAVE_ABSEIL
          #   outputfile: benchmark
          #   os: [self-hosted, linux, x64]
          #   install: g++-11 gcc-11-multilib g++-11-multilib
          #   command: sudo cset shield --exec -- nice -n -20 sudo -u gha ./benchmark
          # - compiler: g++-11
          #   architecture: -m32
          #   sourcefile: string_view.cpp
          #   compileroptions: -std=c++2a -O3 -DNDEBUG -DHAVE_ABSEIL
          #   outputfile: benchmark
          #   os: [self-hosted, linux, x64]
          #   install: g++-11 gcc-11-multilib g++-11-multilib
          #   command: sudo cset shield --exec -- nice -n -20 sudo -u gha ./benchmark
          # - compiler: g++-11
          #   architecture: -m32
          #   sourcefile: uint32.cpp
          #   compileroptions: -std=c++2a -O3 -DNDEBUG -DHAVE_ABSEIL
          #   outputfile: benchmark
          #   os: [self-hosted, linux, x64]
          #   install: g++-11 gcc-11-multilib g++-11-multilib
          #   command: sudo cset shield --exec -- nice -n -20 sudo -u gha ./benchmark
          # - compiler: g++-11
          #   architecture: -m32
          #   sourcefile: uint64.cpp
          #   compileroptions: -std=c++2a -O3 -DNDEBUG -DHAVE_ABSEIL
          #   outputfile: benchmark
          #   os: [self-hosted, linux, x64]
          #   install: g++-11 gcc-11-multilib g++-11-multilib
          #   command: sudo cset shield --exec -- nice -n -20 sudo -u gha ./benchmark
          - compiler: clang++-12
            architecture: -m32
            sourcefile: string.cpp
            compileroptions: -std=c++2a -O3 -DNDEBUG -DHAVE_ABSEIL
            outputfile: benchmark
            os: [self-hosted, linux, x64]
            install: gcc-multilib g++-multilib
            command: sudo cset shield --exec -- nice -n -20 sudo -u gha ./benchmark
          # - compiler: clang++-12
          #   architecture: -m32
          #   sourcefile: string_view.cpp
          #   compileroptions: -std=c++2a -O3 -DNDEBUG -DHAVE_ABSEIL
          #   outputfile: benchmark
          #   os: [self-hosted, linux, x64]
          #   install: gcc-multilib g++-multilib
          #   command: sudo cset shield --exec -- nice -n -20 sudo -u gha ./benchmark
          # - compiler: clang++-12
          #   architecture: -m32
          #   sourcefile: uint32.cpp
          #   compileroptions: -std=c++2a -O3 -DNDEBUG -DHAVE_ABSEIL
          #   outputfile: benchmark
          #   os: [self-hosted, linux, x64]
          #   install: gcc-multilib g++-multilib
          #   command: sudo cset shield --exec -- nice -n -20 sudo -u gha ./benchmark
          # - compiler: clang++-12
          #   architecture: -m32
          #   sourcefile: uint64.cpp
          #   compileroptions: -std=c++2a -O3 -DNDEBUG -DHAVE_ABSEIL
          #   outputfile: benchmark
          #   os: [self-hosted, linux, x64]
          #   install: gcc-multilib g++-multilib
          #   command: sudo cset shield --exec -- nice -n -20 sudo -u gha ./benchmark
          # - compiler: clang++-12
          #   architecture: -m32
          #   sourcefile: string.cpp
          #   compileroptions: -std=c++2a -O3 -stdlib=libc++ -DNDEBUG -DHAVE_ABSEIL
          #   outputfile: benchmark
          #   os: ubuntu-20.04
          #   install: libc++-12-dev:i386 libc++abi-12-dev:i386 gcc-multilib g++-multilib
          # - compiler: clang++-12
          #   architecture: -m32
          #   sourcefile: string_view.cpp
          #   compileroptions: -std=c++2a -O3 -stdlib=libc++ -DNDEBUG -DHAVE_ABSEIL
          #   outputfile: benchmark
          #   os: ubuntu-20.04
          #   install: libc++-12-dev:i386 libc++abi-12-dev:i386 gcc-multilib g++-multilib
          # - compiler: clang++-12
          #   architecture: -m32
          #   sourcefile: uint32.cpp
          #   compileroptions: -std=c++2a -O3 -stdlib=libc++ -DNDEBUG -DHAVE_ABSEIL
          #   outputfile: benchmark
          #   os: ubuntu-20.04
          #   install: libc++-12-dev:i386 libc++abi-12-dev:i386 gcc-multilib g++-multilib
          # - compiler: clang++-12
          #   architecture: -m32
          #   sourcefile: uint64.cpp
          #   compileroptions: -std=c++2a -O3 -stdlib=libc++ -DNDEBUG -DHAVE_ABSEIL
          #   outputfile: benchmark
          #   os: ubuntu-20.04
          #   install: libc++-12-dev:i386 libc++abi-12-dev:i386 gcc-multilib g++-multilib

    runs-on: ${{matrix.os}}

    steps:
      - uses: actions/checkout@v2

      - name: Install packages
        if: matrix.install
        run: |
          if [ -n "${{matrix.command}}" ]; then

              # dedicated-server

              if [ -n "${{matrix.globalinstall}}" ]; then
                  sudo -E apt-add-repository -y ppa:ubuntu-toolchain-r/test
                  if uname -p | grep -q 'x86_64'; then sudo dpkg --add-architecture i386 ; fi
                  sudo apt-get update
                  sudo apt-get install -y ${{matrix.globalinstall}}
              else
                  : # dedicated-server jobs matrix.install section will be ignored. Add all packages to matrix.globalinstall instead.
                  : # only set matrix.globalinstall on one job.
              fi
          else

              # standard gha runners

              # sudo -E apt-add-repository -y ppa:ubuntu-toolchain-r/test
              if uname -p | grep -q 'x86_64'; then sudo dpkg --add-architecture i386 ; fi
              sudo apt-get update
              sudo apt-get install -y ${{matrix.install}}
          fi

      - name: Install Boost
        run: |
          if [ -n "${{matrix.command}}" ]; then
            set -xe
            export BOOST_BRANCH=boost-1.78.0
            cd $HOME
            if [ ! -d boost-root ]; then
              git clone -b $BOOST_BRANCH https://github.com/boostorg/boost.git boost-root --depth 1
              cd boost-root
              git submodule update --init --depth 1
              ./bootstrap.sh
              ./b2 headers
              cd ..
            else
              : # Manually reset the self-hosted runner if modifying BOOST_BRANCH.
            fi
            ln -s $HOME/boost-root $GITHUB_WORKSPACE/boost-root
          else
            cd $GITHUB_WORKSPACE
            git clone https://github.com/boostorg/boost.git boost-root
            cd boost-root
            git checkout boost-1.78.0
            git submodule update --init
            ./bootstrap.sh
            ./b2 -d0 headers
          fi

      - name: Install Abseil
        run: |
          cd $GITHUB_WORKSPACE
          git clone -b lts_2021_11_02 https://github.com/abseil/abseil-cpp.git abseil-root
      - name: Install fastrange
        run: |
          cd $GITHUB_WORKSPACE
          git clone https://github.com/lemire/fastrange.git fastrange-root
      - name: Compile
        run: |
          cd $GITHUB_WORKSPACE
          ${{matrix.compiler}} --version
          ${{matrix.compiler}} ${{matrix.sourcefile}} ${{matrix.architecture}} ${{matrix.compileroptions}} -o ${{matrix.outputfile}} -I$GITHUB_WORKSPACE/boost-root -I$GITHUB_WORKSPACE/abseil-root -I$GITHUB_WORKSPACE/fastrange-root
      - name: Run benchmarks
        run: |
          if [ -n "${{matrix.command}}" ]; then
              echo "running benchmarks"
              ${{matrix.command}}
          else
              echo "running benchmarks"
              ./${{matrix.outputfile}}
          fi
  windows:
    strategy:
      fail-fast: false
      matrix:
        include:
          # - compiler: cl
          #   architecture: x64
          #   sourcefile: string.cpp
          #   compileroptions: /std:c++latest /O2 /D "NDEBUG" /D "HAVE_ABSEIL" /EHsc /MD /Fe:benchmark.exe
          #   outputfile: benchmark.exe            
          #   os: windows-2019
          # - compiler: cl
          #   architecture: x64
          #   sourcefile: string_view.cpp
          #   compileroptions: /std:c++latest /O2 /D "NDEBUG" /D "HAVE_ABSEIL" /EHsc /MD /Fe:benchmark.exe
          #   outputfile: benchmark.exe            
          #   os: windows-2019
          # - compiler: cl
          #   architecture: x64
          #   sourcefile: uint32.cpp
          #   compileroptions: /std:c++latest /O2 /D "NDEBUG" /D "HAVE_ABSEIL" /EHsc /MD /Fe:benchmark.exe
          #   outputfile: benchmark.exe            
          #   os: windows-2019
          # - compiler: cl
          #   architecture: x64
          #   sourcefile: uint64.cpp
          #   compileroptions: /std:c++latest /O2 /D "NDEBUG" /D "HAVE_ABSEIL" /EHsc /MD /Fe:benchmark.exe
          #   outputfile: benchmark.exe            
          #   os: windows-2019
          # - compiler: cl
          #   architecture: x86
          #   sourcefile: string.cpp
          #   compileroptions: /std:c++latest /O2 /D "NDEBUG" /D "HAVE_ABSEIL" /EHsc /MD /Fe:benchmark.exe
          #   outputfile: benchmark.exe            
          #   os: windows-2019
          # - compiler: cl
          #   architecture: x86
          #   sourcefile: string_view.cpp
          #   compileroptions: /std:c++latest /O2 /D "NDEBUG" /D "HAVE_ABSEIL" /EHsc /MD /Fe:benchmark.exe
          #   outputfile: benchmark.exe            
          #   os: windows-2019
          # - compiler: cl
          #   architecture: x86
          #   sourcefile: uint32.cpp
          #   compileroptions: /std:c++latest /O2 /D "NDEBUG" /D "HAVE_ABSEIL" /EHsc /MD /Fe:benchmark.exe
          #   outputfile: benchmark.exe            
          #   os: windows-2019
          - compiler: cl
            architecture: x86
            sourcefile: uint64.cpp
            compileroptions: /std:c++latest /O2 /D "NDEBUG" /D "HAVE_ABSEIL" /EHsc /MD /Fe:benchmark.exe
            outputfile: benchmark.exe            
            os: windows-2019

    runs-on: ${{matrix.os}}

    steps:
      - uses: actions/checkout@v2

      - name: Install Boost
        shell: cmd
        run: |
          cd %GITHUB_WORKSPACE%
          git clone https://github.com/boostorg/boost.git boost-root
          cd boost-root
          git checkout boost-1.78.0
          git submodule update --init
          cmd /c bootstrap.bat
          .\b2.exe -d0 headers
      - name: Install Abseil
        shell: cmd
        run: |
          cd %GITHUB_WORKSPACE%
          git clone -b lts_2021_11_02 https://github.com/abseil/abseil-cpp.git abseil-root
      - name: Install fastrange
        shell: cmd
        run: |
          cd %GITHUB_WORKSPACE%
          git clone https://github.com/lemire/fastrange.git fastrange-root
      - name: Compile
        shell: cmd
        run: |
          cd %GITHUB_WORKSPACE%
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" ${{matrix.architecture}}
          set INCLUDE=%INCLUDE%;%GITHUB_WORKSPACE%\boost-root
          set INCLUDE=%INCLUDE%;%GITHUB_WORKSPACE%\abseil-root
          set INCLUDE=%INCLUDE%;%GITHUB_WORKSPACE%\fastrange-root
          echo %INCLUDE%
          ${{matrix.compiler}} ${{matrix.sourcefile}} ${{matrix.compileroptions}}
      - name: Run benchmark
        shell: cmd
        run: |
          ${{matrix.outputfile}}
